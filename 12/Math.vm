function Math.init 0
call Math2.new 0
pop static 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 0
neg
return
label IF_END0
function Math.multiply 3
push constant 0
pop local 1
push constant 0
pop local 0
push static 0
push argument 1
call Math2.abs 2
pop local 2
label WHILE_EXP0
push local 2
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push argument 0
add
pop local 0
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP0
label WHILE_END0
push argument 1
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
goto IF_END0
label IF_FALSE0
push local 0
neg
return
label IF_END0
function Math.divide 3
push static 0
push argument 0
call Math2.abs 2
pop local 1
push static 0
push argument 1
call Math2.abs 2
pop local 2
push constant 0
pop local 0
label WHILE_EXP0
push local 1
push local 2
gt
push local 1
push local 2
eq
or
not
if-goto WHILE_END0
push local 1
push local 2
sub
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push constant 1
neg
gt
push argument 1
push constant 1
neg
gt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
goto IF_END0
label IF_FALSE0
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
return
goto IF_END1
label IF_FALSE1
push local 0
neg
return
label IF_END1
label IF_END0
function Math.sqrt 3
push constant 0
pop local 0
push constant 1
neg
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push argument 0
lt
push local 2
push argument 0
eq
or
not
if-goto WHILE_END0
push local 1
push constant 1
add
pop local 1
push static 0
push local 1
push local 1
call Math2.multiply 3
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 1
push constant 1
sub
return
function Math.max 0
push argument 0
push argument 1
gt
push argument 0
push argument 1
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
function Math.min 0
push argument 0
push argument 1
gt
push argument 0
push argument 1
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
